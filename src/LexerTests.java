import static org.junit.Assert.assertEquals;

import org.junit.Test;
import player.SimpleReader;
import player.Token;
import player.Token.Type;
import player.abcLexer;

public class LexerTests {
    // test individual pieces and make sure that they return the required tokens
    // test for invalid characters and make sure that the lexer will throw an exception 
    @Test
    public void Lexpiece1() {
        SimpleReader sr = new SimpleReader();
        String forLexer =sr.FileToString("sample_abc/piece1.abc");
        abcLexer lex = new abcLexer(forLexer);
        Token tok;
        //header part
        tok=lex.next();
        assertEquals(Type.X_INDEX,tok.getType());
        assertEquals(tok.getVal(), "X:1");
        tok=lex.next();
        assertEquals(Type.T_TITLE,tok.getType());
        assertEquals(tok.getVal(), "T:Piece No.1");
        tok=lex.next();
        assertEquals(Type.M_METER,tok.getType());
        assertEquals(tok.getVal(), "M:4/4");
        tok=lex.next();
        assertEquals(Type.L_NOTELENGTH,tok.getType());
        assertEquals(tok.getVal(), "L:1/4");
        tok=lex.next();
        assertEquals(Type.Q_TEMPO,tok.getType());
        assertEquals(tok.getVal(), "Q:140");
        tok=lex.next();
        assertEquals(Type.K_KEY,tok.getType());
        assertEquals(tok.getVal(), "K:C");

        //Body
        tok=lex.next();
        System.out.println(tok.getVal());
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "C");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "C");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "C3/4");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "D/4");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E3/4");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "D/4");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E3/4");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "F/4");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "G2");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.TUPLET,tok.getType());
        assertEquals(tok.getVal(), "(3");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c/2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c/2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c/2");
        tok=lex.next();
        assertEquals(Type.TUPLET,tok.getType());
        assertEquals(tok.getVal(), "(3");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "G/2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "G/2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "G/2");
        tok=lex.next();
        assertEquals(Type.TUPLET,tok.getType());
        assertEquals(tok.getVal(), "(3");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E/2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E/2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E/2");
        tok=lex.next();
        assertEquals(Type.TUPLET,tok.getType());
        assertEquals(tok.getVal(), "(3");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "C/2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "C/2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "C/2");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "G3/4");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "F/4");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E3/4");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d/4");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "C");
        tok=lex.next();
        assertEquals(Type.EOF,tok.getType());
        assertEquals(tok.getVal(), "");
    }
    
    @Test
    public void LexTLittleNight() {
        SimpleReader sr = new SimpleReader();
        String forLexer =sr.FileToString("sample_abc/little_night_music.abc");
        abcLexer lex = new abcLexer(forLexer);
        Token tok;
        //header part
        tok=lex.next();
        assertEquals(Type.X_INDEX,tok.getType());
        assertEquals(tok.getVal(), "X:1");
        tok=lex.next();
        assertEquals(Type.T_TITLE,tok.getType());
        assertEquals(tok.getVal(), "T:Little Night Music Mvt. 1");
        tok=lex.next();
        assertEquals(Type.C_COMPOSER,tok.getType());
        assertEquals(tok.getVal(), "C:Wolfgang Amadeus Mozart");
        tok=lex.next();
        assertEquals(Type.Q_TEMPO,tok.getType());
        assertEquals(tok.getVal(), "Q:280");
        tok=lex.next();
        assertEquals(Type.M_METER,tok.getType());
        assertEquals(tok.getVal(), "M:4/4");
        tok=lex.next();
        assertEquals(Type.L_NOTELENGTH,tok.getType());
        assertEquals(tok.getVal(), "L:1/8");
        tok=lex.next();
        assertEquals(Type.K_KEY,tok.getType());
        assertEquals(tok.getVal(), "K:G");
        
        //Body
        tok=lex.next();
        assertEquals(Type.CHORD_OPEN,tok.getType());
        assertEquals(tok.getVal(), "[");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "D2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g2");
        tok=lex.next();
        assertEquals(Type.CHORD_CLOSE,tok.getType());
        assertEquals(tok.getVal(), "]");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g2");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "b");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d'2");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z2");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c'2");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "a");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c'2");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "a");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c'");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "a");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "a");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d2");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z2");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.CHORD_OPEN,tok.getType());
        assertEquals(tok.getVal(), "[");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "D");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g");
        tok=lex.next();
        assertEquals(Type.CHORD_CLOSE,tok.getType());
        assertEquals(tok.getVal(), "]");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g3");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "b");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "a");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f3");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "a");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c'");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "a");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g3");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "b");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "a");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f3");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "a");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c'");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e1/2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f/2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "a");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g/");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "a/");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "b");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "b");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c'");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "b/");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c'/");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d'2");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z2");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d4");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e4");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B2");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "G");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "F");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "F");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "G");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z2");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d4");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e4");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "G");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "F");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "F");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.CHORD_OPEN,tok.getType());
        assertEquals(tok.getVal(), "[");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "G4");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "G,4");
        tok=lex.next();
        assertEquals(Type.CHORD_CLOSE,tok.getType());
        assertEquals(tok.getVal(), "]");
        tok=lex.next();
        assertEquals(Type.CHORD_OPEN,tok.getType());
        assertEquals(tok.getVal(), "[");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "G");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "G,");
        tok=lex.next();
        assertEquals(Type.CHORD_CLOSE,tok.getType());
        assertEquals(tok.getVal(), "]");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "G1/3");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "F1/3");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "G1/3");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "F");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B4");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B/3");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A/3");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B/3");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d4");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f2");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        }
    
    @Test
    public void Paddy() {
        SimpleReader sr = new SimpleReader();
        String forLexer =sr.FileToString("sample_abc/paddy.abc");
        abcLexer lex = new abcLexer(forLexer);
        Token tok;
        //header part
        tok=lex.next();
        assertEquals(Type.X_INDEX,tok.getType());
        assertEquals(tok.getVal(), "X:1");
        tok=lex.next();
        assertEquals(Type.T_TITLE,tok.getType());
        assertEquals(tok.getVal(), "T:Paddy O'Rafferty");
        tok=lex.next();
        assertEquals(Type.C_COMPOSER,tok.getType());
        assertEquals(tok.getVal(), "C:Trad.");
        tok=lex.next();
        assertEquals(Type.M_METER,tok.getType());
        assertEquals(tok.getVal(), "M:6/8");
        tok=lex.next();
        assertEquals(Type.Q_TEMPO,tok.getType());
        assertEquals(tok.getVal(), "Q:200");
        tok=lex.next();
        assertEquals(Type.K_KEY,tok.getType());
        assertEquals(tok.getVal(), "K:D");
        
        //body part
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        //line 8
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "a");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.REPEAT1,tok.getType());
        assertEquals(tok.getVal(), "[1");
        
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.REPEATEND,tok.getType());
        assertEquals(tok.getVal(), ":|");
        
        tok=lex.next();
        assertEquals(Type.REPEAT2,tok.getType());
        assertEquals(tok.getVal(), "[2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B");
        tok=lex.next();
        assertEquals(Type.MAJORSECTION,tok.getType());
        assertEquals(tok.getVal(), "|]");
        //line 9
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A3");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B3");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "F");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        //line 10
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A3");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B3");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "a");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.REPEAT1,tok.getType());
        assertEquals(tok.getVal(), "[1");
        
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B");
        tok=lex.next();
        assertEquals(Type.REPEATEND,tok.getType());
        assertEquals(tok.getVal(), ":|");
        
        tok=lex.next();
        assertEquals(Type.REPEAT2,tok.getType());
        assertEquals(tok.getVal(), "[2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.MAJORSECTION,tok.getType());
        assertEquals(tok.getVal(), "|]");
        
       //line11
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        //line 12
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "a");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "g");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.REPEATEND,tok.getType());
        assertEquals(tok.getVal(), ":|");
    }

    @Test
    public void Fur_Elise() {
        SimpleReader sr = new SimpleReader();
        String forLexer =sr.FileToString("sample_abc/fur_elise.abc");
        abcLexer lex = new abcLexer(forLexer);
        Token tok;
        //header part
        tok=lex.next();
        assertEquals(Type.X_INDEX,tok.getType());
        assertEquals(tok.getVal(), "X:1");
        tok=lex.next();
        assertEquals(Type.T_TITLE,tok.getType());
        assertEquals(tok.getVal(), "T:Bagatelle No.25 in A, WoO.59");
        tok=lex.next();
        assertEquals(Type.C_COMPOSER,tok.getType());
        assertEquals(tok.getVal(), "C:Ludwig van Beethoven");
        tok=lex.next();
        assertEquals(Type.VOICE,tok.getType());
        assertEquals(tok.getVal(), "V:1");
        tok=lex.next();
        assertEquals(Type.VOICE,tok.getType());
        assertEquals(tok.getVal(), "V:2");
        tok=lex.next();
        assertEquals(Type.M_METER,tok.getType());
        assertEquals(tok.getVal(), "M:3/8");
        tok=lex.next();
        assertEquals(Type.L_NOTELENGTH,tok.getType());
        assertEquals(tok.getVal(), "L:1/16");
        tok=lex.next();
        assertEquals(Type.Q_TEMPO,tok.getType());
        assertEquals(tok.getVal(), "Q:240");
        tok=lex.next();
        assertEquals(Type.K_KEY,tok.getType());
        assertEquals(tok.getVal(), "K:Am");
        
        //Body
        tok=lex.next();
        assertEquals(Type.VOICE,tok.getType());
        assertEquals(tok.getVal(), "V:1");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "^d");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "^d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "=d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A2");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "C");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B2");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "^G");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c2");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "^d");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.VOICE,tok.getType());
        assertEquals(tok.getVal(), "V:2");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z2");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z6");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A,,");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E,");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A,");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z2");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E,,");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E,");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "^G,");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z2");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A,,");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E,");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A,");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z2");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.VOICE, tok.getType());
        assertEquals(tok.getVal(), "V:1");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "^d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "=d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A2");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "C");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B2");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.REPEAT1,tok.getType());
        assertEquals(tok.getVal(), "[1");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A2");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z2");
        tok=lex.next();
        assertEquals(Type.REPEATEND,tok.getType());
        assertEquals(tok.getVal(), ":|");
        tok=lex.next();
        assertEquals(Type.REPEAT2,tok.getType());
        assertEquals(tok.getVal(), "[2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A2");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.VOICE, tok.getType());
        assertEquals(tok.getVal(), "V:2");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z6");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A,,");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E,");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A,");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z2");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E,,");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E,");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "^G,");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z2");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.REPEAT1,tok.getType());
        assertEquals(tok.getVal(), "[1");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A,,");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E,");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A,");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.REPEATEND,tok.getType());
        assertEquals(tok.getVal(), ":|");
        tok=lex.next();
        assertEquals(Type.REPEAT2,tok.getType());
        assertEquals(tok.getVal(), "[2");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A,,");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E,");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A,");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z2");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.VOICE, tok.getType());
        assertEquals(tok.getVal(), "V:1");
        tok=lex.next();
        assertEquals(Type.REPEATSTART, tok.getType());
        assertEquals(tok.getVal(), "|:");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e3");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "G");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "f");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d3");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "F");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c3");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "c");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B2");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e'");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "^d");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        
        tok=lex.next();
        assertEquals(Type.VOICE,tok.getType());
        assertEquals(tok.getVal(), "V:2");
        tok=lex.next();
        assertEquals(Type.REPEATSTART,tok.getType());
        assertEquals(tok.getVal(), "|:");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "C,");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E,");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "C");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z2");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "G,,");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "G,");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "B,");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z2");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A,,");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E,");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A,");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z2");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E,,");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E,");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "E");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "^d");
        tok=lex.next();
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "e");
        tok=lex.next();
        assertEquals(Type.REST,tok.getType());
        assertEquals(tok.getVal(), "z");
        tok=lex.next();
        assertEquals(Type.BAR,tok.getType());
        assertEquals(tok.getVal(), "|");
    }
    
    @Test(expected=RuntimeException.class)
    public void invalidNote() {
        //invalid note sequence
        String forLexer ="JSJ";
        abcLexer lex = new abcLexer(forLexer);
        Token tok;
        tok=lex.next();
    }
    @Test
    public void accidentalsOctaves() {
        String forLexer ="__A_A^^A^AA,,A,a'a''";
        abcLexer lex = new abcLexer(forLexer);
        Token tok;
        tok=lex.next(); 
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "__A");
        tok=lex.next(); 
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "_A");
        tok=lex.next(); 
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "^^A");
        tok=lex.next(); 
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "^A");
        tok=lex.next(); 
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A,,");
        tok=lex.next(); 
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "A,");
        tok=lex.next(); 
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "a'");
        tok=lex.next(); 
        assertEquals(Type.NOTE,tok.getType());
        assertEquals(tok.getVal(), "a''");
    }
}

